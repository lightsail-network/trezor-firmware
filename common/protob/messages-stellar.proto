syntax = "proto2";
package hw.trezor.messages.stellar;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageStellar";

/**
 * Describes a Stellar asset
 * @embed
 */
message StellarAsset {
    required uint32 type = 1;       // 0 = native asset (XLM), 1 = alphanum 4, 2 = alphanum 12
    optional string code = 2;       // for non-native assets, string describing the code
    optional string issuer = 3;     // issuing address
}

message StellarTimeBounds {
    required uint64 min_time = 1;
    required uint64 max_time = 2;   // 0 here means no max_time
}

/**
 * price in fractional representation
 */
message Price{
    required sint32 n = 1; // numerator
    required sint32 d = 2; // denominator
};

message StellarMemo {
    required uint32 memo_type = 1;         // 0 = none, 1 = text, 2 = id, 3 = hash, 4 = return
    optional string memo_text = 2;         // up to 28 characters (4 bytes are for length)
    optional uint64 memo_id = 3;           // 8-byte uint64
    optional bytes memo_hash = 4;          // 32 bytes representing a hash
}

message StellarMuxedAccount {
    required uint32 crypto_key_type = 1;
    optional string ed25519_account = 2;
    optional uint64 muxed_id = 3;
}

/**
 * Request: Address at the specified index
 * @start
 * @next StellarAddress
 */
message StellarGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path. For compatibility with other wallets, must be m/44'/148'/index'
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Address for the given index
 * @end
 */
message StellarAddress {
    required string address = 1;    // Address in Stellar format (base32 of a pubkey with checksum)
}

message StellarSignTxV0 {
    repeated uint32 address_n = 1;          // BIP-32 path. For compatibility with other wallets, must be m/44'/148'/index'
    optional string network_passphrase = 2; // passphrase for signing messages on the destination network
}

message StellarSignTxV1 {
    repeated uint32 address_n = 1;          // BIP-32 path. For compatibility with other wallets, must be m/44'/148'/index'
    optional string network_passphrase = 2; // passphrase for signing messages on the destination network
}

message StellarTxV0Request {
}

message StellarTxV1Request {
}

/**
 * Request: ask device to sign Stellar transaction
 * @start
 * @next StellarTxOpRequest
 */
message StellarTxV0 {
    required string source_account = 1;         // source account address
    required uint32 fee = 2;                    // Fee (in stroops) for the transaction
    required uint64 sequence_number = 3;        // transaction sequence number
    optional StellarTimeBounds time_bounds = 4;   // unix timestamp (client must truncate this to 32 bytes)
    required StellarMemo memo = 5;
    optional uint32 num_operations = 6;    // number of operations in this transaction
}

/**
 * Request: ask device to sign Stellar transaction
 * @start
 * @next StellarTxOpRequest
 */
message StellarTxV1 {
    required StellarMuxedAccount source_account = 1;         // source account address
    required uint32 fee = 2;                    // Fee (in stroops) for the transaction
    required uint64 sequence_number = 3;        // transaction sequence number
    optional StellarTimeBounds time_bounds = 4;   // unix timestamp (client must truncate this to 32 bytes)
    required StellarMemo memo = 5;
    optional uint32 num_operations = 6;    // number of operations in this transaction
}

/**
 * Response: device is ready for client to send the next operation
 * @next StellarPaymentOp
 * @next StellarCreateAccountOp
 * @next StellarPathPaymentOp
 * @next StellarManageOfferOp
 * @next StellarCreatePassiveOfferOp
 * @next StellarSetOptionsOp
 * @next StellarChangeTrustOp
 * @next StellarAllowTrustOp
 * @next StellarAccountMergeOp
 * @next StellarManageDataOp
 * @next StellarBumpSequenceOp
 */
message StellarTxOpRequest {
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarPaymentOp {
    optional StellarMuxedAccount source_account = 1;         // (optional) source account address
    required StellarMuxedAccount destination_account = 2;    // destination account address
    required StellarAsset asset = 3;        // asset involved in the operation
    required sint64 amount = 4;                 // amount of the given asset to pay
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarCreateAccountOp {
    optional StellarMuxedAccount source_account = 1;     // (optional) source account address
    required string new_account = 2;        // account address to create
    required sint64 starting_balance = 3;   // initial starting balance for the new account
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarPathPaymentStrictReceive {
    optional StellarMuxedAccount source_account = 1;         // (optional) source address
    required StellarAsset send_asset = 2;
    required sint64 send_max = 3;
    required StellarMuxedAccount destination_account = 4;
    required StellarAsset destination_asset = 5;
    required sint64 destination_amount = 6;
    repeated StellarAsset paths = 7;
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarManageSellOfferOp {
    optional StellarMuxedAccount source_account = 1;             // (optional) source account address
    required StellarAsset selling_asset = 2;
    required StellarAsset buying_asset = 3;
    required sint64 amount = 4;
    required Price price = 5;
    required uint64 offer_id = 6;                   // Offer ID for updating an existing offer
}

/**
 * Request: ask device to required bytes signature = 2;   // signature suitable for sending to the Stellar networko confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarCreatePassiveSellOfferOp {
    optional StellarMuxedAccount source_account = 1;             // (optional) source account address
    required StellarAsset selling_asset = 2;
    required StellarAsset buying_asset = 3;
    required sint64 amount = 4;
    required Price price = 5;
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarSetOptionsOp {
    optional StellarMuxedAccount source_account = 1;                 // (optional) source account address
    optional string inflation_destination_account = 2;  // (optional) inflation destination address
    optional uint32 clear_flags = 3;
    optional uint32 set_flags = 4;
    optional uint32 master_weight = 5;
    optional uint32 low_threshold = 6;
    optional uint32 medium_threshold = 7;
    optional uint32 high_threshold = 8;
    optional string home_domain = 9;
    // TODO:
    optional uint32 signer_type = 10;
    optional bytes signer_key = 11;
    optional uint32 signer_weight = 12;
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarChangeTrustOp {
    optional StellarMuxedAccount source_account = 1;     // (optional) source account address
    required StellarAsset asset = 2;
    required uint64 limit = 3;
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarAllowTrustOp {
    optional StellarMuxedAccount source_account = 1;     // (optional) source account address
    required string trusted_account = 2;    // The account being allowed to hold the asset
    required uint32 asset_type = 3;         // 1 = 4-character, 2 = 12-character
    required string asset_code = 4;         // human-readable asset code
    required uint32 authorize = 5;
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarAccountMergeOp {
    optional StellarMuxedAccount source_account = 1;         // (optional) source account address
    required StellarMuxedAccount destination_account = 2;    // destination account address
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarManageDataOp {
    optional StellarMuxedAccount source_account = 1; // (optional) source account address
    required string key = 2;
    optional bytes value = 3;           // 64 bytes of arbitrary data
}

/**
 * Request: ask device to confirm this operation type
 * @next StellarTxOpRequest
 * @next StellarSignedTx
 */
message StellarBumpSequenceOp {
    optional StellarMuxedAccount source_account = 1; // (optional) source account address
    required uint64 bump_to = 2;        // new sequence number
}

/**
 * Response: signature for transaction
 * @end
 */
message StellarSignedTx {
    required bytes public_key = 1;  // public key for the private key used to sign data
    required bytes signature = 2;   // signature suitable for sending to the Stellar network
}
